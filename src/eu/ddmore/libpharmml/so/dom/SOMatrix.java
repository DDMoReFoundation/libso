/*******************************************************************************
 * Copyright (c) 2014 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 *
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 *
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.10.16 at 04:24:00 PM BST 
//


package eu.ddmore.libpharmml.so.dom;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import eu.ddmore.libpharmml.dom.commontypes.Matrix;
import eu.ddmore.libpharmml.dom.commontypes.PharmMLRootType;


/**
 * Type defining the matrix with estimation results. This object acts as a wrapper
 * to a common matrix object. Data is available through the enclosed matrix and not
 * through this SOMatrix object.
 * 
 * <p>Java class for SOMatrix complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SOMatrix">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.pharmml.org/2013/03/CommonTypes}PharmMLRootType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}Matrix"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SOMatrix", propOrder = {
    "matrix"
})
public class SOMatrix
    extends PharmMLRootType
{

    @XmlElement(name = "Matrix", namespace = "http://www.pharmml.org/2013/03/CommonTypes", required = true)
    @XmlJavaTypeAdapter(SOMatrix.MatrixAdapter.class)
    protected Matrix matrix;

    /**
     * Returns the actual matrix that contains the results.
     * 
     * @return
     *     possible object is
     *     {@link Matrix }
     *     
     */
    public Matrix getMatrix() {
        return matrix;
    }

    /**
     * Sets the value of the matrix property.
     * 
     * @param value
     *     allowed object is
     *     {@link Matrix }
     *     
     */
    public void setMatrix(Matrix value) {
        this.matrix = value;
    }
    
    /**
     * Creates a new {@link Matrix} object, addis it the current SOMatrix and returns it.
     * @param type Type of the matrix. See {@link Matrix} documentation.
     * @return The {@link Matrix} object.
     */
    public Matrix createMatrix(Matrix.Type type){
    	Matrix matrix = new Matrix();
    	matrix.setMatrixType(type);
    	this.matrix = matrix;
    	return matrix;
    }
    
    public static class MatrixAdapter extends XmlAdapter<Matrix, Matrix>{

		@Override
		public Matrix unmarshal(Matrix v) throws Exception {
			Matrix matrix;
			if(v != null){
				matrix = new Matrix();
				matrix.setColumnNames(v.getColumnNames());
				matrix.setDescription(v.getDescription());
				matrix.setDiagDefault(v.getDiagDefault());
				matrix.setId(v.getId());
				matrix.setMatrixType(v.getMatrixType());
				matrix.setNumbCols(v.getNumbCols());
				matrix.setNumbRows(v.getNumbRows());
				matrix.setOffDiagDefault(v.getOffDiagDefault());
				matrix.setRowNames(v.getRowNames());
				matrix.setSymbId(v.getSymbId());
				matrix.setUnmarshalVersion(v.getUnmarshalVersion());
				matrix.getListOfMatrixElements().addAll(v.getListOfMatrixElements());
			} else {
				matrix = null;
			}
			return matrix;
		}

		@Override
		public Matrix marshal(Matrix v) throws Exception {
			return v;
		}
    	
    }

}
