/*******************************************************************************
 * Copyright (c) 2014 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 *
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 *
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.10.17 at 04:00:02 PM BST 
//


package eu.ddmore.libpharmml.so.dom;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import eu.ddmore.libpharmml.dom.commontypes.PharmMLRootType;
import eu.ddmore.libpharmml.dom.commontypes.RealValue;


/**
 * AIC, BIC and DIC measures to be defined here.
 * 
 * <p>Java class for InformationCriteriaType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="InformationCriteriaType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.pharmml.org/2013/03/CommonTypes}PharmMLRootType">
 *       &lt;sequence>
 *         &lt;element name="AIC" type="{http://www.pharmml.org/2013/03/CommonTypes}RealValueType" minOccurs="0"/>
 *         &lt;element name="BIC" type="{http://www.pharmml.org/2013/03/CommonTypes}RealValueType" minOccurs="0"/>
 *         &lt;element name="DIC" type="{http://www.pharmml.org/2013/03/CommonTypes}RealValueType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "InformationCriteriaType", propOrder = {
    "aic",
    "bic",
    "dic"
})
public class InformationCriteria
    extends PharmMLRootType
{

    @XmlElement(name = "AIC")
    protected RealValue aic;
    @XmlElement(name = "BIC")
    protected RealValue bic;
    @XmlElement(name = "DIC")
    protected RealValue dic;
    
    /**
     * Empty constructor
     */
    public InformationCriteria(){}
    
    /**
     * Creates new information criteria with the specified values. 
     * All the parameters of this constructor are nullable, so no
     * element will be created for a null criterion.
     * @param aic Akaike information criterion.
     * @param bic Bayesian information criterion.
     * @param dic Deviance information criterion.
     */
    public InformationCriteria(Double aic, Double bic, Double dic){
    	if(aic != null){
    		this.aic = new RealValue(aic);
    	}
    	if(bic != null){
    		this.bic = new RealValue(bic);
    	}
    	if(dic != null){
    		this.dic = new RealValue(dic);
    	}
    }

    /**
     * Gets the value of the aic property.
     * 
     * @return
     *     possible object is
     *     {@link RealValue }
     *     
     */
    public RealValue getAIC() {
        return aic;
    }

    /**
     * Sets the value of the aic property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealValue }
     *     
     */
    public void setAIC(RealValue value) {
        this.aic = value;
    }

    /**
     * Gets the value of the bic property.
     * 
     * @return
     *     possible object is
     *     {@link RealValueType }
     *     
     */
    public RealValue getBIC() {
        return bic;
    }

    /**
     * Sets the value of the bic property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealValueType }
     *     
     */
    public void setBIC(RealValue value) {
        this.bic = value;
    }

    /**
     * Gets the value of the dic property.
     * 
     * @return
     *     possible object is
     *     {@link RealValueType }
     *     
     */
    public RealValue getDIC() {
        return dic;
    }

    /**
     * Sets the value of the dic property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealValueType }
     *     
     */
    public void setDIC(RealValue value) {
        this.dic = value;
    }
    
    /**
     * Creates a new empty {@link RealValue} aic element, adds it to the current object and returns it.
     * @return The created {@link RealValue} object.
     */
    public RealValue createAic(){
    	RealValue el = new RealValue();
    	this.aic = el;
    	return el;
    }
    /**
     * Creates a new {@link RealValue} aic element, adds it to the current object and returns it.
     * @param value The real value of the element.
     * @return The created {@link RealValue} object.
     */
    public RealValue createAic(double value){
    	RealValue el = new RealValue();
    	el.setValue(value);
    	this.aic = el;
    	return el;
    }

    /**
     * Creates a new empty {@link RealValue} bic element, adds it to the current object and returns it.
     * @return The created {@link RealValue} object.
     */
    public RealValue createBic(){
    	RealValue el = new RealValue();
    	this.bic = el;
    	return el;
    }
    /**
     * Creates a new {@link RealValue} bic element, adds it to the current object and returns it.
     * @param value The real value of the element.
     * @return The created {@link RealValue} object.
     */
    public RealValue createBic(double value){
    	RealValue el = new RealValue();
    	el.setValue(value);
    	this.bic = el;
    	return el;
    }

    /**
     * Creates a new empty {@link RealValue} dic element, adds it to the current object and returns it.
     * @return The created {@link RealValue} object.
     */
    public RealValue createDic(){
    	RealValue el = new RealValue();
    	this.dic = el;
    	return el;
    }
    /**
     * Creates a new empty {@link RealValue} dic element, adds it to the current object and returns it.
     * @param value The real value of the element.
     * @return The created {@link RealValue} object.
     */
    public RealValue createDic(double value){
    	RealValue el = new RealValue();
    	el.setValue(value);
    	this.dic = el;
    	return el;
    }


}
